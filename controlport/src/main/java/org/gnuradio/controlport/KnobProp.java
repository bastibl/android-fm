/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.gnuradio.controlport;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class KnobProp implements org.apache.thrift.TBase<KnobProp, KnobProp._Fields>, java.io.Serializable, Cloneable, Comparable<KnobProp>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KnobProp");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField UNITS_FIELD_DESC = new org.apache.thrift.protocol.TField("units", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DISPLAY_FIELD_DESC = new org.apache.thrift.protocol.TField("display", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("min", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField DEFAULTVALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultvalue", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new KnobPropStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new KnobPropTupleSchemeFactory();

  /**
   * 
   * @see KnobType
   */
  public KnobType type; // required
  public String units; // required
  public String description; // required
  public int display; // required
  public Knob min; // required
  public Knob max; // required
  public Knob defaultvalue; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeInt(type != null ? type.getValue() : -1);
    out.writeString(units);
    out.writeString(description);
    out.writeInt(display);
    out.writeParcelable(min, flags);
    out.writeParcelable(max, flags);
    out.writeParcelable(defaultvalue, flags);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public KnobProp(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.type = KnobType.findByValue(in.readInt());
    this.units= in.readString();
    this.description= in.readString();
    this.display = in.readInt();
    this.min= in.readParcelable(KnobProp.class.getClassLoader());
    this.max= in.readParcelable(KnobProp.class.getClassLoader());
    this.defaultvalue= in.readParcelable(KnobProp.class.getClassLoader());
  }

  public static final android.os.Parcelable.Creator<KnobProp> CREATOR = new android.os.Parcelable.Creator<KnobProp>() {
    @Override
    public KnobProp[] newArray(int size) {
      return new KnobProp[size];
    }

    @Override
    public KnobProp createFromParcel(android.os.Parcel in) {
      return new KnobProp(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see KnobType
     */
    TYPE((short)1, "type"),
    UNITS((short)2, "units"),
    DESCRIPTION((short)3, "description"),
    DISPLAY((short)4, "display"),
    MIN((short)5, "min"),
    MAX((short)6, "max"),
    DEFAULTVALUE((short)7, "defaultvalue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // UNITS
          return UNITS;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // DISPLAY
          return DISPLAY;
        case 5: // MIN
          return MIN;
        case 6: // MAX
          return MAX;
        case 7: // DEFAULTVALUE
          return DEFAULTVALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DISPLAY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, KnobType.class)));
    tmpMap.put(_Fields.UNITS, new org.apache.thrift.meta_data.FieldMetaData("units", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY, new org.apache.thrift.meta_data.FieldMetaData("display", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN, new org.apache.thrift.meta_data.FieldMetaData("min", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Knob.class)));
    tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Knob.class)));
    tmpMap.put(_Fields.DEFAULTVALUE, new org.apache.thrift.meta_data.FieldMetaData("defaultvalue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Knob.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KnobProp.class, metaDataMap);
  }

  public KnobProp() {
  }

  public KnobProp(
    KnobType type,
    String units,
    String description,
    int display,
    Knob min,
    Knob max,
    Knob defaultvalue)
  {
    this();
    this.type = type;
    this.units = units;
    this.description = description;
    this.display = display;
    setDisplayIsSet(true);
    this.min = min;
    this.max = max;
    this.defaultvalue = defaultvalue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KnobProp(KnobProp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetUnits()) {
      this.units = other.units;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.display = other.display;
    if (other.isSetMin()) {
      this.min = new Knob(other.min);
    }
    if (other.isSetMax()) {
      this.max = new Knob(other.max);
    }
    if (other.isSetDefaultvalue()) {
      this.defaultvalue = new Knob(other.defaultvalue);
    }
  }

  public KnobProp deepCopy() {
    return new KnobProp(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.units = null;
    this.description = null;
    setDisplayIsSet(false);
    this.display = 0;
    this.min = null;
    this.max = null;
    this.defaultvalue = null;
  }

  /**
   * 
   * @see KnobType
   */
  public KnobType getType() {
    return this.type;
  }

  /**
   * 
   * @see KnobType
   */
  public KnobProp setType(KnobType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getUnits() {
    return this.units;
  }

  public KnobProp setUnits(String units) {
    this.units = units;
    return this;
  }

  public void unsetUnits() {
    this.units = null;
  }

  /** Returns true if field units is set (has been assigned a value) and false otherwise */
  public boolean isSetUnits() {
    return this.units != null;
  }

  public void setUnitsIsSet(boolean value) {
    if (!value) {
      this.units = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public KnobProp setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getDisplay() {
    return this.display;
  }

  public KnobProp setDisplay(int display) {
    this.display = display;
    setDisplayIsSet(true);
    return this;
  }

  public void unsetDisplay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISPLAY_ISSET_ID);
  }

  /** Returns true if field display is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplay() {
    return EncodingUtils.testBit(__isset_bitfield, __DISPLAY_ISSET_ID);
  }

  public void setDisplayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISPLAY_ISSET_ID, value);
  }

  public Knob getMin() {
    return this.min;
  }

  public KnobProp setMin(Knob min) {
    this.min = min;
    return this;
  }

  public void unsetMin() {
    this.min = null;
  }

  /** Returns true if field min is set (has been assigned a value) and false otherwise */
  public boolean isSetMin() {
    return this.min != null;
  }

  public void setMinIsSet(boolean value) {
    if (!value) {
      this.min = null;
    }
  }

  public Knob getMax() {
    return this.max;
  }

  public KnobProp setMax(Knob max) {
    this.max = max;
    return this;
  }

  public void unsetMax() {
    this.max = null;
  }

  /** Returns true if field max is set (has been assigned a value) and false otherwise */
  public boolean isSetMax() {
    return this.max != null;
  }

  public void setMaxIsSet(boolean value) {
    if (!value) {
      this.max = null;
    }
  }

  public Knob getDefaultvalue() {
    return this.defaultvalue;
  }

  public KnobProp setDefaultvalue(Knob defaultvalue) {
    this.defaultvalue = defaultvalue;
    return this;
  }

  public void unsetDefaultvalue() {
    this.defaultvalue = null;
  }

  /** Returns true if field defaultvalue is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultvalue() {
    return this.defaultvalue != null;
  }

  public void setDefaultvalueIsSet(boolean value) {
    if (!value) {
      this.defaultvalue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((KnobType)value);
      }
      break;

    case UNITS:
      if (value == null) {
        unsetUnits();
      } else {
        setUnits((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case DISPLAY:
      if (value == null) {
        unsetDisplay();
      } else {
        setDisplay((Integer)value);
      }
      break;

    case MIN:
      if (value == null) {
        unsetMin();
      } else {
        setMin((Knob)value);
      }
      break;

    case MAX:
      if (value == null) {
        unsetMax();
      } else {
        setMax((Knob)value);
      }
      break;

    case DEFAULTVALUE:
      if (value == null) {
        unsetDefaultvalue();
      } else {
        setDefaultvalue((Knob)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case UNITS:
      return getUnits();

    case DESCRIPTION:
      return getDescription();

    case DISPLAY:
      return getDisplay();

    case MIN:
      return getMin();

    case MAX:
      return getMax();

    case DEFAULTVALUE:
      return getDefaultvalue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case UNITS:
      return isSetUnits();
    case DESCRIPTION:
      return isSetDescription();
    case DISPLAY:
      return isSetDisplay();
    case MIN:
      return isSetMin();
    case MAX:
      return isSetMax();
    case DEFAULTVALUE:
      return isSetDefaultvalue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KnobProp)
      return this.equals((KnobProp)that);
    return false;
  }

  public boolean equals(KnobProp that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_units = true && this.isSetUnits();
    boolean that_present_units = true && that.isSetUnits();
    if (this_present_units || that_present_units) {
      if (!(this_present_units && that_present_units))
        return false;
      if (!this.units.equals(that.units))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_display = true;
    boolean that_present_display = true;
    if (this_present_display || that_present_display) {
      if (!(this_present_display && that_present_display))
        return false;
      if (this.display != that.display)
        return false;
    }

    boolean this_present_min = true && this.isSetMin();
    boolean that_present_min = true && that.isSetMin();
    if (this_present_min || that_present_min) {
      if (!(this_present_min && that_present_min))
        return false;
      if (!this.min.equals(that.min))
        return false;
    }

    boolean this_present_max = true && this.isSetMax();
    boolean that_present_max = true && that.isSetMax();
    if (this_present_max || that_present_max) {
      if (!(this_present_max && that_present_max))
        return false;
      if (!this.max.equals(that.max))
        return false;
    }

    boolean this_present_defaultvalue = true && this.isSetDefaultvalue();
    boolean that_present_defaultvalue = true && that.isSetDefaultvalue();
    if (this_present_defaultvalue || that_present_defaultvalue) {
      if (!(this_present_defaultvalue && that_present_defaultvalue))
        return false;
      if (!this.defaultvalue.equals(that.defaultvalue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_units = true && (isSetUnits());
    list.add(present_units);
    if (present_units)
      list.add(units);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_display = true;
    list.add(present_display);
    if (present_display)
      list.add(display);

    boolean present_min = true && (isSetMin());
    list.add(present_min);
    if (present_min)
      list.add(min);

    boolean present_max = true && (isSetMax());
    list.add(present_max);
    if (present_max)
      list.add(max);

    boolean present_defaultvalue = true && (isSetDefaultvalue());
    list.add(present_defaultvalue);
    if (present_defaultvalue)
      list.add(defaultvalue);

    return list.hashCode();
  }

  @Override
  public int compareTo(KnobProp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnits()).compareTo(other.isSetUnits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.units, other.units);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplay()).compareTo(other.isSetDisplay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.display, other.display);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin()).compareTo(other.isSetMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min, other.min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax()).compareTo(other.isSetMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, other.max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultvalue()).compareTo(other.isSetDefaultvalue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultvalue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultvalue, other.defaultvalue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KnobProp(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("units:");
    if (this.units == null) {
      sb.append("null");
    } else {
      sb.append(this.units);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("display:");
    sb.append(this.display);
    first = false;
    if (!first) sb.append(", ");
    sb.append("min:");
    if (this.min == null) {
      sb.append("null");
    } else {
      sb.append(this.min);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("max:");
    if (this.max == null) {
      sb.append("null");
    } else {
      sb.append(this.max);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultvalue:");
    if (this.defaultvalue == null) {
      sb.append("null");
    } else {
      sb.append(this.defaultvalue);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (min != null) {
      min.validate();
    }
    if (max != null) {
      max.validate();
    }
    if (defaultvalue != null) {
      defaultvalue.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KnobPropStandardSchemeFactory implements SchemeFactory {
    public KnobPropStandardScheme getScheme() {
      return new KnobPropStandardScheme();
    }
  }

  private static class KnobPropStandardScheme extends StandardScheme<KnobProp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KnobProp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = org.gnuradio.controlport.KnobType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UNITS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.units = iprot.readString();
              struct.setUnitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISPLAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.display = iprot.readI32();
              struct.setDisplayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.min = new Knob();
              struct.min.read(iprot);
              struct.setMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.max = new Knob();
              struct.max.read(iprot);
              struct.setMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEFAULTVALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.defaultvalue = new Knob();
              struct.defaultvalue.read(iprot);
              struct.setDefaultvalueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KnobProp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.units != null) {
        oprot.writeFieldBegin(UNITS_FIELD_DESC);
        oprot.writeString(struct.units);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DISPLAY_FIELD_DESC);
      oprot.writeI32(struct.display);
      oprot.writeFieldEnd();
      if (struct.min != null) {
        oprot.writeFieldBegin(MIN_FIELD_DESC);
        struct.min.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.max != null) {
        oprot.writeFieldBegin(MAX_FIELD_DESC);
        struct.max.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.defaultvalue != null) {
        oprot.writeFieldBegin(DEFAULTVALUE_FIELD_DESC);
        struct.defaultvalue.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KnobPropTupleSchemeFactory implements SchemeFactory {
    public KnobPropTupleScheme getScheme() {
      return new KnobPropTupleScheme();
    }
  }

  private static class KnobPropTupleScheme extends TupleScheme<KnobProp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KnobProp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetUnits()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetDisplay()) {
        optionals.set(3);
      }
      if (struct.isSetMin()) {
        optionals.set(4);
      }
      if (struct.isSetMax()) {
        optionals.set(5);
      }
      if (struct.isSetDefaultvalue()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetUnits()) {
        oprot.writeString(struct.units);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetDisplay()) {
        oprot.writeI32(struct.display);
      }
      if (struct.isSetMin()) {
        struct.min.write(oprot);
      }
      if (struct.isSetMax()) {
        struct.max.write(oprot);
      }
      if (struct.isSetDefaultvalue()) {
        struct.defaultvalue.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KnobProp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.type = org.gnuradio.controlport.KnobType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.units = iprot.readString();
        struct.setUnitsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.display = iprot.readI32();
        struct.setDisplayIsSet(true);
      }
      if (incoming.get(4)) {
        struct.min = new Knob();
        struct.min.read(iprot);
        struct.setMinIsSet(true);
      }
      if (incoming.get(5)) {
        struct.max = new Knob();
        struct.max.read(iprot);
        struct.setMaxIsSet(true);
      }
      if (incoming.get(6)) {
        struct.defaultvalue = new Knob();
        struct.defaultvalue.read(iprot);
        struct.setDefaultvalueIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

