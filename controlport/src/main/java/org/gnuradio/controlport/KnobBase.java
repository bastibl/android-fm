/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.gnuradio.controlport;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class KnobBase implements org.apache.thrift.TBase<KnobBase, KnobBase._Fields>, java.io.Serializable, Cloneable, Comparable<KnobBase>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KnobBase");

  private static final org.apache.thrift.protocol.TField A_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("a_bool", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField A_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("a_byte", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField A_SHORT_FIELD_DESC = new org.apache.thrift.protocol.TField("a_short", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField A_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("a_int", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField A_LONG_FIELD_DESC = new org.apache.thrift.protocol.TField("a_long", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField A_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("a_double", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField A_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("a_string", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField A_COMPLEX_FIELD_DESC = new org.apache.thrift.protocol.TField("a_complex", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField A_F32VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("a_f32vector", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField A_F64VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("a_f64vector", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField A_S64VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("a_s64vector", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField A_S32VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("a_s32vector", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField A_S16VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("a_s16vector", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField A_S8VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("a_s8vector", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField A_C32VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("a_c32vector", org.apache.thrift.protocol.TType.LIST, (short)15);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new KnobBaseStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new KnobBaseTupleSchemeFactory();

  public boolean a_bool; // required
  public byte a_byte; // required
  public short a_short; // required
  public int a_int; // required
  public long a_long; // required
  public double a_double; // required
  public String a_string; // required
  public complex a_complex; // required
  public List<Double> a_f32vector; // required
  public List<Double> a_f64vector; // required
  public List<Long> a_s64vector; // required
  public List<Integer> a_s32vector; // required
  public List<Short> a_s16vector; // required
  public ByteBuffer a_s8vector; // required
  public List<complex> a_c32vector; // required

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeInt(a_bool ? 1 : 0);
    out.writeByte(a_byte);
    out.writeInt(new Short(a_short).intValue());
    out.writeInt(a_int);
    out.writeLong(a_long);
    out.writeDouble(a_double);
    out.writeString(a_string);
    out.writeParcelable(a_complex, flags);
    out.writeList(a_f32vector);
    out.writeList(a_f64vector);
    out.writeList(a_s64vector);
    out.writeList(a_s32vector);
    out.writeList(a_s16vector);
    out.writeInt(a_s8vector!=null ? 1 : 0);
    if(a_s8vector != null) { 
      out.writeByteArray(a_s8vector.array(), a_s8vector.position() + a_s8vector.arrayOffset(), a_s8vector.limit() - a_s8vector.position() );
    }
    out.writeTypedList(a_c32vector);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public KnobBase(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.a_bool = (in.readInt()==1);
    this.a_byte = in.readByte();
    this.a_short = (short) in.readInt();
    this.a_int = in.readInt();
    this.a_long = in.readLong();
    this.a_double = in.readDouble();
    this.a_string= in.readString();
    this.a_complex= in.readParcelable(KnobBase.class.getClassLoader());
    this.a_f32vector = new ArrayList<Double>();
    in.readList(this.a_f32vector, KnobBase.class.getClassLoader());
    this.a_f64vector = new ArrayList<Double>();
    in.readList(this.a_f64vector, KnobBase.class.getClassLoader());
    this.a_s64vector = new ArrayList<Long>();
    in.readList(this.a_s64vector, KnobBase.class.getClassLoader());
    this.a_s32vector = new ArrayList<Integer>();
    in.readList(this.a_s32vector, KnobBase.class.getClassLoader());
    this.a_s16vector = new ArrayList<Short>();
    in.readList(this.a_s16vector, KnobBase.class.getClassLoader());
    if(in.readInt()==1) {
      this.a_s8vector = ByteBuffer.wrap(in.createByteArray());
    }
    this.a_c32vector = new ArrayList<complex>();
    in.readTypedList(this.a_c32vector, complex.CREATOR);
  }

  public static final android.os.Parcelable.Creator<KnobBase> CREATOR = new android.os.Parcelable.Creator<KnobBase>() {
    @Override
    public KnobBase[] newArray(int size) {
      return new KnobBase[size];
    }

    @Override
    public KnobBase createFromParcel(android.os.Parcel in) {
      return new KnobBase(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    A_BOOL((short)1, "a_bool"),
    A_BYTE((short)2, "a_byte"),
    A_SHORT((short)3, "a_short"),
    A_INT((short)4, "a_int"),
    A_LONG((short)5, "a_long"),
    A_DOUBLE((short)6, "a_double"),
    A_STRING((short)7, "a_string"),
    A_COMPLEX((short)8, "a_complex"),
    A_F32VECTOR((short)9, "a_f32vector"),
    A_F64VECTOR((short)10, "a_f64vector"),
    A_S64VECTOR((short)11, "a_s64vector"),
    A_S32VECTOR((short)12, "a_s32vector"),
    A_S16VECTOR((short)13, "a_s16vector"),
    A_S8VECTOR((short)14, "a_s8vector"),
    A_C32VECTOR((short)15, "a_c32vector");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // A_BOOL
          return A_BOOL;
        case 2: // A_BYTE
          return A_BYTE;
        case 3: // A_SHORT
          return A_SHORT;
        case 4: // A_INT
          return A_INT;
        case 5: // A_LONG
          return A_LONG;
        case 6: // A_DOUBLE
          return A_DOUBLE;
        case 7: // A_STRING
          return A_STRING;
        case 8: // A_COMPLEX
          return A_COMPLEX;
        case 9: // A_F32VECTOR
          return A_F32VECTOR;
        case 10: // A_F64VECTOR
          return A_F64VECTOR;
        case 11: // A_S64VECTOR
          return A_S64VECTOR;
        case 12: // A_S32VECTOR
          return A_S32VECTOR;
        case 13: // A_S16VECTOR
          return A_S16VECTOR;
        case 14: // A_S8VECTOR
          return A_S8VECTOR;
        case 15: // A_C32VECTOR
          return A_C32VECTOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __A_BOOL_ISSET_ID = 0;
  private static final int __A_BYTE_ISSET_ID = 1;
  private static final int __A_SHORT_ISSET_ID = 2;
  private static final int __A_INT_ISSET_ID = 3;
  private static final int __A_LONG_ISSET_ID = 4;
  private static final int __A_DOUBLE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.A_BOOL, new org.apache.thrift.meta_data.FieldMetaData("a_bool", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.A_BYTE, new org.apache.thrift.meta_data.FieldMetaData("a_byte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.A_SHORT, new org.apache.thrift.meta_data.FieldMetaData("a_short", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.A_INT, new org.apache.thrift.meta_data.FieldMetaData("a_int", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.A_LONG, new org.apache.thrift.meta_data.FieldMetaData("a_long", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.A_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("a_double", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A_STRING, new org.apache.thrift.meta_data.FieldMetaData("a_string", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.A_COMPLEX, new org.apache.thrift.meta_data.FieldMetaData("a_complex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, complex.class)));
    tmpMap.put(_Fields.A_F32VECTOR, new org.apache.thrift.meta_data.FieldMetaData("a_f32vector", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "VectorF")));
    tmpMap.put(_Fields.A_F64VECTOR, new org.apache.thrift.meta_data.FieldMetaData("a_f64vector", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "VectorD")));
    tmpMap.put(_Fields.A_S64VECTOR, new org.apache.thrift.meta_data.FieldMetaData("a_s64vector", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "VectorL")));
    tmpMap.put(_Fields.A_S32VECTOR, new org.apache.thrift.meta_data.FieldMetaData("a_s32vector", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "VectorI")));
    tmpMap.put(_Fields.A_S16VECTOR, new org.apache.thrift.meta_data.FieldMetaData("a_s16vector", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "VectorT")));
    tmpMap.put(_Fields.A_S8VECTOR, new org.apache.thrift.meta_data.FieldMetaData("a_s8vector", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "VectorC")));
    tmpMap.put(_Fields.A_C32VECTOR, new org.apache.thrift.meta_data.FieldMetaData("a_c32vector", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "VectorZ")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KnobBase.class, metaDataMap);
  }

  public KnobBase() {
  }

  public KnobBase(
    boolean a_bool,
    byte a_byte,
    short a_short,
    int a_int,
    long a_long,
    double a_double,
    String a_string,
    complex a_complex,
    List<Double> a_f32vector,
    List<Double> a_f64vector,
    List<Long> a_s64vector,
    List<Integer> a_s32vector,
    List<Short> a_s16vector,
    ByteBuffer a_s8vector,
    List<complex> a_c32vector)
  {
    this();
    this.a_bool = a_bool;
    setA_boolIsSet(true);
    this.a_byte = a_byte;
    setA_byteIsSet(true);
    this.a_short = a_short;
    setA_shortIsSet(true);
    this.a_int = a_int;
    setA_intIsSet(true);
    this.a_long = a_long;
    setA_longIsSet(true);
    this.a_double = a_double;
    setA_doubleIsSet(true);
    this.a_string = a_string;
    this.a_complex = a_complex;
    this.a_f32vector = a_f32vector;
    this.a_f64vector = a_f64vector;
    this.a_s64vector = a_s64vector;
    this.a_s32vector = a_s32vector;
    this.a_s16vector = a_s16vector;
    this.a_s8vector = org.apache.thrift.TBaseHelper.copyBinary(a_s8vector);
    this.a_c32vector = a_c32vector;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KnobBase(KnobBase other) {
    __isset_bitfield = other.__isset_bitfield;
    this.a_bool = other.a_bool;
    this.a_byte = other.a_byte;
    this.a_short = other.a_short;
    this.a_int = other.a_int;
    this.a_long = other.a_long;
    this.a_double = other.a_double;
    if (other.isSetA_string()) {
      this.a_string = other.a_string;
    }
    if (other.isSetA_complex()) {
      this.a_complex = new complex(other.a_complex);
    }
    if (other.isSetA_f32vector()) {
      this.a_f32vector = other.a_f32vector;
    }
    if (other.isSetA_f64vector()) {
      this.a_f64vector = other.a_f64vector;
    }
    if (other.isSetA_s64vector()) {
      this.a_s64vector = other.a_s64vector;
    }
    if (other.isSetA_s32vector()) {
      this.a_s32vector = other.a_s32vector;
    }
    if (other.isSetA_s16vector()) {
      this.a_s16vector = other.a_s16vector;
    }
    if (other.isSetA_s8vector()) {
      this.a_s8vector = other.a_s8vector;
    }
    if (other.isSetA_c32vector()) {
      this.a_c32vector = other.a_c32vector;
    }
  }

  public KnobBase deepCopy() {
    return new KnobBase(this);
  }

  @Override
  public void clear() {
    setA_boolIsSet(false);
    this.a_bool = false;
    setA_byteIsSet(false);
    this.a_byte = 0;
    setA_shortIsSet(false);
    this.a_short = 0;
    setA_intIsSet(false);
    this.a_int = 0;
    setA_longIsSet(false);
    this.a_long = 0;
    setA_doubleIsSet(false);
    this.a_double = 0.0;
    this.a_string = null;
    this.a_complex = null;
    this.a_f32vector = null;
    this.a_f64vector = null;
    this.a_s64vector = null;
    this.a_s32vector = null;
    this.a_s16vector = null;
    this.a_s8vector = null;
    this.a_c32vector = null;
  }

  public boolean isA_bool() {
    return this.a_bool;
  }

  public KnobBase setA_bool(boolean a_bool) {
    this.a_bool = a_bool;
    setA_boolIsSet(true);
    return this;
  }

  public void unsetA_bool() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_BOOL_ISSET_ID);
  }

  /** Returns true if field a_bool is set (has been assigned a value) and false otherwise */
  public boolean isSetA_bool() {
    return EncodingUtils.testBit(__isset_bitfield, __A_BOOL_ISSET_ID);
  }

  public void setA_boolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_BOOL_ISSET_ID, value);
  }

  public byte getA_byte() {
    return this.a_byte;
  }

  public KnobBase setA_byte(byte a_byte) {
    this.a_byte = a_byte;
    setA_byteIsSet(true);
    return this;
  }

  public void unsetA_byte() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_BYTE_ISSET_ID);
  }

  /** Returns true if field a_byte is set (has been assigned a value) and false otherwise */
  public boolean isSetA_byte() {
    return EncodingUtils.testBit(__isset_bitfield, __A_BYTE_ISSET_ID);
  }

  public void setA_byteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_BYTE_ISSET_ID, value);
  }

  public short getA_short() {
    return this.a_short;
  }

  public KnobBase setA_short(short a_short) {
    this.a_short = a_short;
    setA_shortIsSet(true);
    return this;
  }

  public void unsetA_short() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_SHORT_ISSET_ID);
  }

  /** Returns true if field a_short is set (has been assigned a value) and false otherwise */
  public boolean isSetA_short() {
    return EncodingUtils.testBit(__isset_bitfield, __A_SHORT_ISSET_ID);
  }

  public void setA_shortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_SHORT_ISSET_ID, value);
  }

  public int getA_int() {
    return this.a_int;
  }

  public KnobBase setA_int(int a_int) {
    this.a_int = a_int;
    setA_intIsSet(true);
    return this;
  }

  public void unsetA_int() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_INT_ISSET_ID);
  }

  /** Returns true if field a_int is set (has been assigned a value) and false otherwise */
  public boolean isSetA_int() {
    return EncodingUtils.testBit(__isset_bitfield, __A_INT_ISSET_ID);
  }

  public void setA_intIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_INT_ISSET_ID, value);
  }

  public long getA_long() {
    return this.a_long;
  }

  public KnobBase setA_long(long a_long) {
    this.a_long = a_long;
    setA_longIsSet(true);
    return this;
  }

  public void unsetA_long() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_LONG_ISSET_ID);
  }

  /** Returns true if field a_long is set (has been assigned a value) and false otherwise */
  public boolean isSetA_long() {
    return EncodingUtils.testBit(__isset_bitfield, __A_LONG_ISSET_ID);
  }

  public void setA_longIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_LONG_ISSET_ID, value);
  }

  public double getA_double() {
    return this.a_double;
  }

  public KnobBase setA_double(double a_double) {
    this.a_double = a_double;
    setA_doubleIsSet(true);
    return this;
  }

  public void unsetA_double() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_DOUBLE_ISSET_ID);
  }

  /** Returns true if field a_double is set (has been assigned a value) and false otherwise */
  public boolean isSetA_double() {
    return EncodingUtils.testBit(__isset_bitfield, __A_DOUBLE_ISSET_ID);
  }

  public void setA_doubleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_DOUBLE_ISSET_ID, value);
  }

  public String getA_string() {
    return this.a_string;
  }

  public KnobBase setA_string(String a_string) {
    this.a_string = a_string;
    return this;
  }

  public void unsetA_string() {
    this.a_string = null;
  }

  /** Returns true if field a_string is set (has been assigned a value) and false otherwise */
  public boolean isSetA_string() {
    return this.a_string != null;
  }

  public void setA_stringIsSet(boolean value) {
    if (!value) {
      this.a_string = null;
    }
  }

  public complex getA_complex() {
    return this.a_complex;
  }

  public KnobBase setA_complex(complex a_complex) {
    this.a_complex = a_complex;
    return this;
  }

  public void unsetA_complex() {
    this.a_complex = null;
  }

  /** Returns true if field a_complex is set (has been assigned a value) and false otherwise */
  public boolean isSetA_complex() {
    return this.a_complex != null;
  }

  public void setA_complexIsSet(boolean value) {
    if (!value) {
      this.a_complex = null;
    }
  }

  public int getA_f32vectorSize() {
    return (this.a_f32vector == null) ? 0 : this.a_f32vector.size();
  }

  public java.util.Iterator<Double> getA_f32vectorIterator() {
    return (this.a_f32vector == null) ? null : this.a_f32vector.iterator();
  }

  public void addToA_f32vector(double elem) {
    if (this.a_f32vector == null) {
      this.a_f32vector = new ArrayList<Double>();
    }
    this.a_f32vector.add(elem);
  }

  public List<Double> getA_f32vector() {
    return this.a_f32vector;
  }

  public KnobBase setA_f32vector(List<Double> a_f32vector) {
    this.a_f32vector = a_f32vector;
    return this;
  }

  public void unsetA_f32vector() {
    this.a_f32vector = null;
  }

  /** Returns true if field a_f32vector is set (has been assigned a value) and false otherwise */
  public boolean isSetA_f32vector() {
    return this.a_f32vector != null;
  }

  public void setA_f32vectorIsSet(boolean value) {
    if (!value) {
      this.a_f32vector = null;
    }
  }

  public int getA_f64vectorSize() {
    return (this.a_f64vector == null) ? 0 : this.a_f64vector.size();
  }

  public java.util.Iterator<Double> getA_f64vectorIterator() {
    return (this.a_f64vector == null) ? null : this.a_f64vector.iterator();
  }

  public void addToA_f64vector(double elem) {
    if (this.a_f64vector == null) {
      this.a_f64vector = new ArrayList<Double>();
    }
    this.a_f64vector.add(elem);
  }

  public List<Double> getA_f64vector() {
    return this.a_f64vector;
  }

  public KnobBase setA_f64vector(List<Double> a_f64vector) {
    this.a_f64vector = a_f64vector;
    return this;
  }

  public void unsetA_f64vector() {
    this.a_f64vector = null;
  }

  /** Returns true if field a_f64vector is set (has been assigned a value) and false otherwise */
  public boolean isSetA_f64vector() {
    return this.a_f64vector != null;
  }

  public void setA_f64vectorIsSet(boolean value) {
    if (!value) {
      this.a_f64vector = null;
    }
  }

  public int getA_s64vectorSize() {
    return (this.a_s64vector == null) ? 0 : this.a_s64vector.size();
  }

  public java.util.Iterator<Long> getA_s64vectorIterator() {
    return (this.a_s64vector == null) ? null : this.a_s64vector.iterator();
  }

  public void addToA_s64vector(long elem) {
    if (this.a_s64vector == null) {
      this.a_s64vector = new ArrayList<Long>();
    }
    this.a_s64vector.add(elem);
  }

  public List<Long> getA_s64vector() {
    return this.a_s64vector;
  }

  public KnobBase setA_s64vector(List<Long> a_s64vector) {
    this.a_s64vector = a_s64vector;
    return this;
  }

  public void unsetA_s64vector() {
    this.a_s64vector = null;
  }

  /** Returns true if field a_s64vector is set (has been assigned a value) and false otherwise */
  public boolean isSetA_s64vector() {
    return this.a_s64vector != null;
  }

  public void setA_s64vectorIsSet(boolean value) {
    if (!value) {
      this.a_s64vector = null;
    }
  }

  public int getA_s32vectorSize() {
    return (this.a_s32vector == null) ? 0 : this.a_s32vector.size();
  }

  public java.util.Iterator<Integer> getA_s32vectorIterator() {
    return (this.a_s32vector == null) ? null : this.a_s32vector.iterator();
  }

  public void addToA_s32vector(int elem) {
    if (this.a_s32vector == null) {
      this.a_s32vector = new ArrayList<Integer>();
    }
    this.a_s32vector.add(elem);
  }

  public List<Integer> getA_s32vector() {
    return this.a_s32vector;
  }

  public KnobBase setA_s32vector(List<Integer> a_s32vector) {
    this.a_s32vector = a_s32vector;
    return this;
  }

  public void unsetA_s32vector() {
    this.a_s32vector = null;
  }

  /** Returns true if field a_s32vector is set (has been assigned a value) and false otherwise */
  public boolean isSetA_s32vector() {
    return this.a_s32vector != null;
  }

  public void setA_s32vectorIsSet(boolean value) {
    if (!value) {
      this.a_s32vector = null;
    }
  }

  public int getA_s16vectorSize() {
    return (this.a_s16vector == null) ? 0 : this.a_s16vector.size();
  }

  public java.util.Iterator<Short> getA_s16vectorIterator() {
    return (this.a_s16vector == null) ? null : this.a_s16vector.iterator();
  }

  public void addToA_s16vector(short elem) {
    if (this.a_s16vector == null) {
      this.a_s16vector = new ArrayList<Short>();
    }
    this.a_s16vector.add(elem);
  }

  public List<Short> getA_s16vector() {
    return this.a_s16vector;
  }

  public KnobBase setA_s16vector(List<Short> a_s16vector) {
    this.a_s16vector = a_s16vector;
    return this;
  }

  public void unsetA_s16vector() {
    this.a_s16vector = null;
  }

  /** Returns true if field a_s16vector is set (has been assigned a value) and false otherwise */
  public boolean isSetA_s16vector() {
    return this.a_s16vector != null;
  }

  public void setA_s16vectorIsSet(boolean value) {
    if (!value) {
      this.a_s16vector = null;
    }
  }

  public byte[] getA_s8vector() {
    setA_s8vector(org.apache.thrift.TBaseHelper.rightSize(a_s8vector));
    return a_s8vector == null ? null : a_s8vector.array();
  }

  public ByteBuffer bufferForA_s8vector() {
    return org.apache.thrift.TBaseHelper.copyBinary(a_s8vector);
  }

  public KnobBase setA_s8vector(byte[] a_s8vector) {
    this.a_s8vector = a_s8vector == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(a_s8vector, a_s8vector.length));
    return this;
  }

  public KnobBase setA_s8vector(ByteBuffer a_s8vector) {
    this.a_s8vector = org.apache.thrift.TBaseHelper.copyBinary(a_s8vector);
    return this;
  }

  public void unsetA_s8vector() {
    this.a_s8vector = null;
  }

  /** Returns true if field a_s8vector is set (has been assigned a value) and false otherwise */
  public boolean isSetA_s8vector() {
    return this.a_s8vector != null;
  }

  public void setA_s8vectorIsSet(boolean value) {
    if (!value) {
      this.a_s8vector = null;
    }
  }

  public int getA_c32vectorSize() {
    return (this.a_c32vector == null) ? 0 : this.a_c32vector.size();
  }

  public java.util.Iterator<complex> getA_c32vectorIterator() {
    return (this.a_c32vector == null) ? null : this.a_c32vector.iterator();
  }

  public void addToA_c32vector(complex elem) {
    if (this.a_c32vector == null) {
      this.a_c32vector = new ArrayList<complex>();
    }
    this.a_c32vector.add(elem);
  }

  public List<complex> getA_c32vector() {
    return this.a_c32vector;
  }

  public KnobBase setA_c32vector(List<complex> a_c32vector) {
    this.a_c32vector = a_c32vector;
    return this;
  }

  public void unsetA_c32vector() {
    this.a_c32vector = null;
  }

  /** Returns true if field a_c32vector is set (has been assigned a value) and false otherwise */
  public boolean isSetA_c32vector() {
    return this.a_c32vector != null;
  }

  public void setA_c32vectorIsSet(boolean value) {
    if (!value) {
      this.a_c32vector = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case A_BOOL:
      if (value == null) {
        unsetA_bool();
      } else {
        setA_bool((Boolean)value);
      }
      break;

    case A_BYTE:
      if (value == null) {
        unsetA_byte();
      } else {
        setA_byte((Byte)value);
      }
      break;

    case A_SHORT:
      if (value == null) {
        unsetA_short();
      } else {
        setA_short((Short)value);
      }
      break;

    case A_INT:
      if (value == null) {
        unsetA_int();
      } else {
        setA_int((Integer)value);
      }
      break;

    case A_LONG:
      if (value == null) {
        unsetA_long();
      } else {
        setA_long((Long)value);
      }
      break;

    case A_DOUBLE:
      if (value == null) {
        unsetA_double();
      } else {
        setA_double((Double)value);
      }
      break;

    case A_STRING:
      if (value == null) {
        unsetA_string();
      } else {
        setA_string((String)value);
      }
      break;

    case A_COMPLEX:
      if (value == null) {
        unsetA_complex();
      } else {
        setA_complex((complex)value);
      }
      break;

    case A_F32VECTOR:
      if (value == null) {
        unsetA_f32vector();
      } else {
        setA_f32vector((List<Double>)value);
      }
      break;

    case A_F64VECTOR:
      if (value == null) {
        unsetA_f64vector();
      } else {
        setA_f64vector((List<Double>)value);
      }
      break;

    case A_S64VECTOR:
      if (value == null) {
        unsetA_s64vector();
      } else {
        setA_s64vector((List<Long>)value);
      }
      break;

    case A_S32VECTOR:
      if (value == null) {
        unsetA_s32vector();
      } else {
        setA_s32vector((List<Integer>)value);
      }
      break;

    case A_S16VECTOR:
      if (value == null) {
        unsetA_s16vector();
      } else {
        setA_s16vector((List<Short>)value);
      }
      break;

    case A_S8VECTOR:
      if (value == null) {
        unsetA_s8vector();
      } else {
        setA_s8vector((ByteBuffer)value);
      }
      break;

    case A_C32VECTOR:
      if (value == null) {
        unsetA_c32vector();
      } else {
        setA_c32vector((List<complex>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case A_BOOL:
      return isA_bool();

    case A_BYTE:
      return getA_byte();

    case A_SHORT:
      return getA_short();

    case A_INT:
      return getA_int();

    case A_LONG:
      return getA_long();

    case A_DOUBLE:
      return getA_double();

    case A_STRING:
      return getA_string();

    case A_COMPLEX:
      return getA_complex();

    case A_F32VECTOR:
      return getA_f32vector();

    case A_F64VECTOR:
      return getA_f64vector();

    case A_S64VECTOR:
      return getA_s64vector();

    case A_S32VECTOR:
      return getA_s32vector();

    case A_S16VECTOR:
      return getA_s16vector();

    case A_S8VECTOR:
      return getA_s8vector();

    case A_C32VECTOR:
      return getA_c32vector();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case A_BOOL:
      return isSetA_bool();
    case A_BYTE:
      return isSetA_byte();
    case A_SHORT:
      return isSetA_short();
    case A_INT:
      return isSetA_int();
    case A_LONG:
      return isSetA_long();
    case A_DOUBLE:
      return isSetA_double();
    case A_STRING:
      return isSetA_string();
    case A_COMPLEX:
      return isSetA_complex();
    case A_F32VECTOR:
      return isSetA_f32vector();
    case A_F64VECTOR:
      return isSetA_f64vector();
    case A_S64VECTOR:
      return isSetA_s64vector();
    case A_S32VECTOR:
      return isSetA_s32vector();
    case A_S16VECTOR:
      return isSetA_s16vector();
    case A_S8VECTOR:
      return isSetA_s8vector();
    case A_C32VECTOR:
      return isSetA_c32vector();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KnobBase)
      return this.equals((KnobBase)that);
    return false;
  }

  public boolean equals(KnobBase that) {
    if (that == null)
      return false;

    boolean this_present_a_bool = true;
    boolean that_present_a_bool = true;
    if (this_present_a_bool || that_present_a_bool) {
      if (!(this_present_a_bool && that_present_a_bool))
        return false;
      if (this.a_bool != that.a_bool)
        return false;
    }

    boolean this_present_a_byte = true;
    boolean that_present_a_byte = true;
    if (this_present_a_byte || that_present_a_byte) {
      if (!(this_present_a_byte && that_present_a_byte))
        return false;
      if (this.a_byte != that.a_byte)
        return false;
    }

    boolean this_present_a_short = true;
    boolean that_present_a_short = true;
    if (this_present_a_short || that_present_a_short) {
      if (!(this_present_a_short && that_present_a_short))
        return false;
      if (this.a_short != that.a_short)
        return false;
    }

    boolean this_present_a_int = true;
    boolean that_present_a_int = true;
    if (this_present_a_int || that_present_a_int) {
      if (!(this_present_a_int && that_present_a_int))
        return false;
      if (this.a_int != that.a_int)
        return false;
    }

    boolean this_present_a_long = true;
    boolean that_present_a_long = true;
    if (this_present_a_long || that_present_a_long) {
      if (!(this_present_a_long && that_present_a_long))
        return false;
      if (this.a_long != that.a_long)
        return false;
    }

    boolean this_present_a_double = true;
    boolean that_present_a_double = true;
    if (this_present_a_double || that_present_a_double) {
      if (!(this_present_a_double && that_present_a_double))
        return false;
      if (this.a_double != that.a_double)
        return false;
    }

    boolean this_present_a_string = true && this.isSetA_string();
    boolean that_present_a_string = true && that.isSetA_string();
    if (this_present_a_string || that_present_a_string) {
      if (!(this_present_a_string && that_present_a_string))
        return false;
      if (!this.a_string.equals(that.a_string))
        return false;
    }

    boolean this_present_a_complex = true && this.isSetA_complex();
    boolean that_present_a_complex = true && that.isSetA_complex();
    if (this_present_a_complex || that_present_a_complex) {
      if (!(this_present_a_complex && that_present_a_complex))
        return false;
      if (!this.a_complex.equals(that.a_complex))
        return false;
    }

    boolean this_present_a_f32vector = true && this.isSetA_f32vector();
    boolean that_present_a_f32vector = true && that.isSetA_f32vector();
    if (this_present_a_f32vector || that_present_a_f32vector) {
      if (!(this_present_a_f32vector && that_present_a_f32vector))
        return false;
      if (!this.a_f32vector.equals(that.a_f32vector))
        return false;
    }

    boolean this_present_a_f64vector = true && this.isSetA_f64vector();
    boolean that_present_a_f64vector = true && that.isSetA_f64vector();
    if (this_present_a_f64vector || that_present_a_f64vector) {
      if (!(this_present_a_f64vector && that_present_a_f64vector))
        return false;
      if (!this.a_f64vector.equals(that.a_f64vector))
        return false;
    }

    boolean this_present_a_s64vector = true && this.isSetA_s64vector();
    boolean that_present_a_s64vector = true && that.isSetA_s64vector();
    if (this_present_a_s64vector || that_present_a_s64vector) {
      if (!(this_present_a_s64vector && that_present_a_s64vector))
        return false;
      if (!this.a_s64vector.equals(that.a_s64vector))
        return false;
    }

    boolean this_present_a_s32vector = true && this.isSetA_s32vector();
    boolean that_present_a_s32vector = true && that.isSetA_s32vector();
    if (this_present_a_s32vector || that_present_a_s32vector) {
      if (!(this_present_a_s32vector && that_present_a_s32vector))
        return false;
      if (!this.a_s32vector.equals(that.a_s32vector))
        return false;
    }

    boolean this_present_a_s16vector = true && this.isSetA_s16vector();
    boolean that_present_a_s16vector = true && that.isSetA_s16vector();
    if (this_present_a_s16vector || that_present_a_s16vector) {
      if (!(this_present_a_s16vector && that_present_a_s16vector))
        return false;
      if (!this.a_s16vector.equals(that.a_s16vector))
        return false;
    }

    boolean this_present_a_s8vector = true && this.isSetA_s8vector();
    boolean that_present_a_s8vector = true && that.isSetA_s8vector();
    if (this_present_a_s8vector || that_present_a_s8vector) {
      if (!(this_present_a_s8vector && that_present_a_s8vector))
        return false;
      if (!this.a_s8vector.equals(that.a_s8vector))
        return false;
    }

    boolean this_present_a_c32vector = true && this.isSetA_c32vector();
    boolean that_present_a_c32vector = true && that.isSetA_c32vector();
    if (this_present_a_c32vector || that_present_a_c32vector) {
      if (!(this_present_a_c32vector && that_present_a_c32vector))
        return false;
      if (!this.a_c32vector.equals(that.a_c32vector))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_a_bool = true;
    list.add(present_a_bool);
    if (present_a_bool)
      list.add(a_bool);

    boolean present_a_byte = true;
    list.add(present_a_byte);
    if (present_a_byte)
      list.add(a_byte);

    boolean present_a_short = true;
    list.add(present_a_short);
    if (present_a_short)
      list.add(a_short);

    boolean present_a_int = true;
    list.add(present_a_int);
    if (present_a_int)
      list.add(a_int);

    boolean present_a_long = true;
    list.add(present_a_long);
    if (present_a_long)
      list.add(a_long);

    boolean present_a_double = true;
    list.add(present_a_double);
    if (present_a_double)
      list.add(a_double);

    boolean present_a_string = true && (isSetA_string());
    list.add(present_a_string);
    if (present_a_string)
      list.add(a_string);

    boolean present_a_complex = true && (isSetA_complex());
    list.add(present_a_complex);
    if (present_a_complex)
      list.add(a_complex);

    boolean present_a_f32vector = true && (isSetA_f32vector());
    list.add(present_a_f32vector);
    if (present_a_f32vector)
      list.add(a_f32vector);

    boolean present_a_f64vector = true && (isSetA_f64vector());
    list.add(present_a_f64vector);
    if (present_a_f64vector)
      list.add(a_f64vector);

    boolean present_a_s64vector = true && (isSetA_s64vector());
    list.add(present_a_s64vector);
    if (present_a_s64vector)
      list.add(a_s64vector);

    boolean present_a_s32vector = true && (isSetA_s32vector());
    list.add(present_a_s32vector);
    if (present_a_s32vector)
      list.add(a_s32vector);

    boolean present_a_s16vector = true && (isSetA_s16vector());
    list.add(present_a_s16vector);
    if (present_a_s16vector)
      list.add(a_s16vector);

    boolean present_a_s8vector = true && (isSetA_s8vector());
    list.add(present_a_s8vector);
    if (present_a_s8vector)
      list.add(a_s8vector);

    boolean present_a_c32vector = true && (isSetA_c32vector());
    list.add(present_a_c32vector);
    if (present_a_c32vector)
      list.add(a_c32vector);

    return list.hashCode();
  }

  @Override
  public int compareTo(KnobBase other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetA_bool()).compareTo(other.isSetA_bool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_bool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_bool, other.a_bool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_byte()).compareTo(other.isSetA_byte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_byte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_byte, other.a_byte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_short()).compareTo(other.isSetA_short());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_short()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_short, other.a_short);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_int()).compareTo(other.isSetA_int());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_int()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_int, other.a_int);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_long()).compareTo(other.isSetA_long());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_long()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_long, other.a_long);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_double()).compareTo(other.isSetA_double());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_double()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_double, other.a_double);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_string()).compareTo(other.isSetA_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_string, other.a_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_complex()).compareTo(other.isSetA_complex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_complex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_complex, other.a_complex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_f32vector()).compareTo(other.isSetA_f32vector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_f32vector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_f32vector, other.a_f32vector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_f64vector()).compareTo(other.isSetA_f64vector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_f64vector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_f64vector, other.a_f64vector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_s64vector()).compareTo(other.isSetA_s64vector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_s64vector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_s64vector, other.a_s64vector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_s32vector()).compareTo(other.isSetA_s32vector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_s32vector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_s32vector, other.a_s32vector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_s16vector()).compareTo(other.isSetA_s16vector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_s16vector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_s16vector, other.a_s16vector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_s8vector()).compareTo(other.isSetA_s8vector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_s8vector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_s8vector, other.a_s8vector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetA_c32vector()).compareTo(other.isSetA_c32vector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA_c32vector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_c32vector, other.a_c32vector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KnobBase(");
    boolean first = true;

    sb.append("a_bool:");
    sb.append(this.a_bool);
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_byte:");
    sb.append(this.a_byte);
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_short:");
    sb.append(this.a_short);
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_int:");
    sb.append(this.a_int);
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_long:");
    sb.append(this.a_long);
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_double:");
    sb.append(this.a_double);
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_string:");
    if (this.a_string == null) {
      sb.append("null");
    } else {
      sb.append(this.a_string);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_complex:");
    if (this.a_complex == null) {
      sb.append("null");
    } else {
      sb.append(this.a_complex);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_f32vector:");
    if (this.a_f32vector == null) {
      sb.append("null");
    } else {
      sb.append(this.a_f32vector);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_f64vector:");
    if (this.a_f64vector == null) {
      sb.append("null");
    } else {
      sb.append(this.a_f64vector);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_s64vector:");
    if (this.a_s64vector == null) {
      sb.append("null");
    } else {
      sb.append(this.a_s64vector);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_s32vector:");
    if (this.a_s32vector == null) {
      sb.append("null");
    } else {
      sb.append(this.a_s32vector);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_s16vector:");
    if (this.a_s16vector == null) {
      sb.append("null");
    } else {
      sb.append(this.a_s16vector);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_s8vector:");
    if (this.a_s8vector == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.a_s8vector, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("a_c32vector:");
    if (this.a_c32vector == null) {
      sb.append("null");
    } else {
      sb.append(this.a_c32vector);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (a_complex != null) {
      a_complex.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KnobBaseStandardSchemeFactory implements SchemeFactory {
    public KnobBaseStandardScheme getScheme() {
      return new KnobBaseStandardScheme();
    }
  }

  private static class KnobBaseStandardScheme extends StandardScheme<KnobBase> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KnobBase struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // A_BOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.a_bool = iprot.readBool();
              struct.setA_boolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // A_BYTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.a_byte = iprot.readByte();
              struct.setA_byteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // A_SHORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.a_short = iprot.readI16();
              struct.setA_shortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // A_INT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.a_int = iprot.readI32();
              struct.setA_intIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // A_LONG
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.a_long = iprot.readI64();
              struct.setA_longIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // A_DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a_double = iprot.readDouble();
              struct.setA_doubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // A_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.a_string = iprot.readString();
              struct.setA_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // A_COMPLEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.a_complex = new complex();
              struct.a_complex.read(iprot);
              struct.setA_complexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // A_F32VECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.a_f32vector = new ArrayList<Double>(_list0.size);
                double _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readDouble();
                  struct.a_f32vector.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setA_f32vectorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // A_F64VECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.a_f64vector = new ArrayList<Double>(_list3.size);
                double _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readDouble();
                  struct.a_f64vector.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setA_f64vectorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // A_S64VECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.a_s64vector = new ArrayList<Long>(_list6.size);
                long _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI64();
                  struct.a_s64vector.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setA_s64vectorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // A_S32VECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.a_s32vector = new ArrayList<Integer>(_list9.size);
                int _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = iprot.readI32();
                  struct.a_s32vector.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setA_s32vectorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // A_S16VECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.a_s16vector = new ArrayList<Short>(_list12.size);
                short _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = iprot.readI16();
                  struct.a_s16vector.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setA_s16vectorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // A_S8VECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.a_s8vector = iprot.readBinary();
              struct.setA_s8vectorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // A_C32VECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.a_c32vector = new ArrayList<complex>(_list15.size);
                complex _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = new complex();
                  _elem16.read(iprot);
                  struct.a_c32vector.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setA_c32vectorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KnobBase struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(A_BOOL_FIELD_DESC);
      oprot.writeBool(struct.a_bool);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(A_BYTE_FIELD_DESC);
      oprot.writeByte(struct.a_byte);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(A_SHORT_FIELD_DESC);
      oprot.writeI16(struct.a_short);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(A_INT_FIELD_DESC);
      oprot.writeI32(struct.a_int);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(A_LONG_FIELD_DESC);
      oprot.writeI64(struct.a_long);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(A_DOUBLE_FIELD_DESC);
      oprot.writeDouble(struct.a_double);
      oprot.writeFieldEnd();
      if (struct.a_string != null) {
        oprot.writeFieldBegin(A_STRING_FIELD_DESC);
        oprot.writeString(struct.a_string);
        oprot.writeFieldEnd();
      }
      if (struct.a_complex != null) {
        oprot.writeFieldBegin(A_COMPLEX_FIELD_DESC);
        struct.a_complex.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.a_f32vector != null) {
        oprot.writeFieldBegin(A_F32VECTOR_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.a_f32vector.size()));
          for (double _iter18 : struct.a_f32vector)
          {
            oprot.writeDouble(_iter18);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.a_f64vector != null) {
        oprot.writeFieldBegin(A_F64VECTOR_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.a_f64vector.size()));
          for (double _iter19 : struct.a_f64vector)
          {
            oprot.writeDouble(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.a_s64vector != null) {
        oprot.writeFieldBegin(A_S64VECTOR_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.a_s64vector.size()));
          for (long _iter20 : struct.a_s64vector)
          {
            oprot.writeI64(_iter20);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.a_s32vector != null) {
        oprot.writeFieldBegin(A_S32VECTOR_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.a_s32vector.size()));
          for (int _iter21 : struct.a_s32vector)
          {
            oprot.writeI32(_iter21);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.a_s16vector != null) {
        oprot.writeFieldBegin(A_S16VECTOR_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.a_s16vector.size()));
          for (short _iter22 : struct.a_s16vector)
          {
            oprot.writeI16(_iter22);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.a_s8vector != null) {
        oprot.writeFieldBegin(A_S8VECTOR_FIELD_DESC);
        oprot.writeBinary(struct.a_s8vector);
        oprot.writeFieldEnd();
      }
      if (struct.a_c32vector != null) {
        oprot.writeFieldBegin(A_C32VECTOR_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.a_c32vector.size()));
          for (complex _iter23 : struct.a_c32vector)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KnobBaseTupleSchemeFactory implements SchemeFactory {
    public KnobBaseTupleScheme getScheme() {
      return new KnobBaseTupleScheme();
    }
  }

  private static class KnobBaseTupleScheme extends TupleScheme<KnobBase> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KnobBase struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetA_bool()) {
        optionals.set(0);
      }
      if (struct.isSetA_byte()) {
        optionals.set(1);
      }
      if (struct.isSetA_short()) {
        optionals.set(2);
      }
      if (struct.isSetA_int()) {
        optionals.set(3);
      }
      if (struct.isSetA_long()) {
        optionals.set(4);
      }
      if (struct.isSetA_double()) {
        optionals.set(5);
      }
      if (struct.isSetA_string()) {
        optionals.set(6);
      }
      if (struct.isSetA_complex()) {
        optionals.set(7);
      }
      if (struct.isSetA_f32vector()) {
        optionals.set(8);
      }
      if (struct.isSetA_f64vector()) {
        optionals.set(9);
      }
      if (struct.isSetA_s64vector()) {
        optionals.set(10);
      }
      if (struct.isSetA_s32vector()) {
        optionals.set(11);
      }
      if (struct.isSetA_s16vector()) {
        optionals.set(12);
      }
      if (struct.isSetA_s8vector()) {
        optionals.set(13);
      }
      if (struct.isSetA_c32vector()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetA_bool()) {
        oprot.writeBool(struct.a_bool);
      }
      if (struct.isSetA_byte()) {
        oprot.writeByte(struct.a_byte);
      }
      if (struct.isSetA_short()) {
        oprot.writeI16(struct.a_short);
      }
      if (struct.isSetA_int()) {
        oprot.writeI32(struct.a_int);
      }
      if (struct.isSetA_long()) {
        oprot.writeI64(struct.a_long);
      }
      if (struct.isSetA_double()) {
        oprot.writeDouble(struct.a_double);
      }
      if (struct.isSetA_string()) {
        oprot.writeString(struct.a_string);
      }
      if (struct.isSetA_complex()) {
        struct.a_complex.write(oprot);
      }
      if (struct.isSetA_f32vector()) {
        {
          oprot.writeI32(struct.a_f32vector.size());
          for (double _iter24 : struct.a_f32vector)
          {
            oprot.writeDouble(_iter24);
          }
        }
      }
      if (struct.isSetA_f64vector()) {
        {
          oprot.writeI32(struct.a_f64vector.size());
          for (double _iter25 : struct.a_f64vector)
          {
            oprot.writeDouble(_iter25);
          }
        }
      }
      if (struct.isSetA_s64vector()) {
        {
          oprot.writeI32(struct.a_s64vector.size());
          for (long _iter26 : struct.a_s64vector)
          {
            oprot.writeI64(_iter26);
          }
        }
      }
      if (struct.isSetA_s32vector()) {
        {
          oprot.writeI32(struct.a_s32vector.size());
          for (int _iter27 : struct.a_s32vector)
          {
            oprot.writeI32(_iter27);
          }
        }
      }
      if (struct.isSetA_s16vector()) {
        {
          oprot.writeI32(struct.a_s16vector.size());
          for (short _iter28 : struct.a_s16vector)
          {
            oprot.writeI16(_iter28);
          }
        }
      }
      if (struct.isSetA_s8vector()) {
        oprot.writeBinary(struct.a_s8vector);
      }
      if (struct.isSetA_c32vector()) {
        {
          oprot.writeI32(struct.a_c32vector.size());
          for (complex _iter29 : struct.a_c32vector)
          {
            _iter29.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KnobBase struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.a_bool = iprot.readBool();
        struct.setA_boolIsSet(true);
      }
      if (incoming.get(1)) {
        struct.a_byte = iprot.readByte();
        struct.setA_byteIsSet(true);
      }
      if (incoming.get(2)) {
        struct.a_short = iprot.readI16();
        struct.setA_shortIsSet(true);
      }
      if (incoming.get(3)) {
        struct.a_int = iprot.readI32();
        struct.setA_intIsSet(true);
      }
      if (incoming.get(4)) {
        struct.a_long = iprot.readI64();
        struct.setA_longIsSet(true);
      }
      if (incoming.get(5)) {
        struct.a_double = iprot.readDouble();
        struct.setA_doubleIsSet(true);
      }
      if (incoming.get(6)) {
        struct.a_string = iprot.readString();
        struct.setA_stringIsSet(true);
      }
      if (incoming.get(7)) {
        struct.a_complex = new complex();
        struct.a_complex.read(iprot);
        struct.setA_complexIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list30 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.a_f32vector = new ArrayList<Double>(_list30.size);
          double _elem31;
          for (int _i32 = 0; _i32 < _list30.size; ++_i32)
          {
            _elem31 = iprot.readDouble();
            struct.a_f32vector.add(_elem31);
          }
        }
        struct.setA_f32vectorIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.a_f64vector = new ArrayList<Double>(_list33.size);
          double _elem34;
          for (int _i35 = 0; _i35 < _list33.size; ++_i35)
          {
            _elem34 = iprot.readDouble();
            struct.a_f64vector.add(_elem34);
          }
        }
        struct.setA_f64vectorIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.a_s64vector = new ArrayList<Long>(_list36.size);
          long _elem37;
          for (int _i38 = 0; _i38 < _list36.size; ++_i38)
          {
            _elem37 = iprot.readI64();
            struct.a_s64vector.add(_elem37);
          }
        }
        struct.setA_s64vectorIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.a_s32vector = new ArrayList<Integer>(_list39.size);
          int _elem40;
          for (int _i41 = 0; _i41 < _list39.size; ++_i41)
          {
            _elem40 = iprot.readI32();
            struct.a_s32vector.add(_elem40);
          }
        }
        struct.setA_s32vectorIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.a_s16vector = new ArrayList<Short>(_list42.size);
          short _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = iprot.readI16();
            struct.a_s16vector.add(_elem43);
          }
        }
        struct.setA_s16vectorIsSet(true);
      }
      if (incoming.get(13)) {
        struct.a_s8vector = iprot.readBinary();
        struct.setA_s8vectorIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.a_c32vector = new ArrayList<complex>(_list45.size);
          complex _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new complex();
            _elem46.read(iprot);
            struct.a_c32vector.add(_elem46);
          }
        }
        struct.setA_c32vectorIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

